<HTML>
<HEAD>
<TITLE>Calendar</TITLE>

<!-- HOW TO USE THIS POPUP

The page which wishes to spawn this popup should have a form with a
text input field to hold the string representation of the date selection
to be bound. It should also have a link which onClick will call window.open
to spawn the popup. The call should look like...

window.open
(
    'calendarPopup.htm?dateForm=NAME_OF_FORM&dateField=NAME_OF_TEXT_FIELD',
    'calendarPopup',
    'resizable=yes,width=250,height=280'
)

where NAME_OF_FORM and NAME_OF_TEXT_FIELD are replaced by the matching names
of the form and text field to bind the date selection to


EXAMPLE:

    <FORM NAME="calendarForm">
        <INPUT TYPE=TEXT NAME="testDate" SIZE=12>
        <A HREF="Select Date" onClick="window.open('calendarPopup.htm?dateForm=calendarForm&dateField=testDate','calendarPopup','resizable=yes,width=250,height=280'); return false;"><IMG SRC="calendar.gif" ALIGN=MIDDLE STYLE="width: 25; height: 25; border: 0"></A>
    </FORM>

Once the popup is spawned, the month and year back and forth buttons allow
navigation through the timeline. Clicking on one of the actual date
cells will select that date, closing the popup, and filling in the bound
dateField with the string representation of the date.
-->

<STYLE>
/* Style for look and feel of popup, change as needed, particularly the colors */
BODY
{
   background-color: white;
    font-family:    Arial, Verdana, Helvetica, sans-serif;
}

P, TH, TD
{
    font-family:    Arial, Verdana, Helvetica, sans-serif;
}

INPUT
{
    font-family:    Arial, Verdana, Helvetica, sans-serif;
    font-size:      12px;
    color:          black;
    border:         solid black 1px;
}

INPUT.dateButton
{
    background-color:   #c0e0e0;
    font-weight:    bold;
    width:          24;
}

INPUT.selectedDateButton
{
    background-color:   #6699cc;
    font-weight:    bold;
    width:          24;
}

INPUT.label
{
    font-size:          14px;
    font-weight:        bold;
    text-align:         center;
    border:             0px;
    color:              white;
    background-color:   transparent;
}

.dateTitle
{
    background-color:   #000099;
}

.dateHeader
{
    background-color:   #6699cc;
    color:              #000000;
    font-weight:        bold;
    text-align:         center;
}

.dateCell
{
    text-align:     center;
}

</STYLE>

<!-- Helper JavaScript files for getting request parameters and Date utilities -->
<SCRIPT SRC="requestParam.js"></SCRIPT>
<SCRIPT SRC="dateHelper.js"></SCRIPT>

<SCRIPT>
// Constants specifying the date button colors
var DEFAULT_COLOR   = '#c0e0e0';
var SELECTED_COLOR  = '#6699cc';

// Resets the calendar grid in theForm so that it represents the
//  month that is selected by the baseDate
function resetGrid( baseDate, theForm )
{
    // loadDate becomes the first day of the month
    var loadDate = new Date( baseDate.getTime() );
    loadDate.setDate( 1 );

    // Which day of the week is the first day?
    var firstDayOffset  = loadDate.getDay();
    var daysPerMonth    = loadDate.daysPerMonth();

    theForm.monthLabel.value  = Date.months[ loadDate.getMonth() ];

    theForm.yearLabel.value = loadDate.getFullYear();

    for( var i=0; i < Date.WEEKS_PER_MONTH; i++ )
    {
        for( var j=0; j < Date.DAYS_PER_WEEK; j++ )
        {
            var dateIdx     = i*Date.DAYS_PER_WEEK + j;
            var dateButton  = theForm.elements['b'+dateIdx ];

            // Reset any modifications coloring
            dateButton.style.backgroundColor = DEFAULT_COLOR;
            dateButton.disabled = false;

            if ( dateIdx < firstDayOffset || dateIdx >= firstDayOffset+daysPerMonth )
            {   // Clear labels for any days outside of the current month
                dateButton.value = '';
                dateButton.disabled = true;
            }
            else
            {
               // Highlight current selected date
               if    (  loadDate.getFullYear()  == originalDate.getFullYear() &&
                     loadDate.getMonth()     == originalDate.getMonth() &&
                     loadDate.getDate()      == originalDate.getDate()
                  )
               {
                  dateButton.style.backgroundColor = SELECTED_COLOR;
                  dateButton.focus();
               }
               dateButton.value = loadDate.getDate();
               loadDate.setDate( loadDate.getDate()+1 );

               // Disable buttons that don't fit criteria
               if ( !isAcceptable( loadDate ) )
               {
                    dateButton.disabled = true;
               }
            }
        }
    }
}

/**
 * Determines whether the given date is acceptable for selection.
 * This should be overwritten on a case-by-case basis.
 * To accept all dates, just return true.
 */
function isAcceptable( testDate )
{
    // return testDate.getDay() == 2;  // Only accept Mondays
    return true;
}

// Called when one of the calendar date buttons was selected
//  Assign the string value of this date selected to the
//  text field (dateField) that was bound to this popup.
function selectDate( baseDate, dateButton, theForm )
{
    if ( dateButton.value.length > 0 )
    {
        baseDate.setDate( parseInt( dateButton.value ) );

        dateField.value = baseDate.format();

        window.close();

        return true;
    }
    else
    {
        return false;
    }
}

// Initialize
// dateField is the text input field in the calling page which spawned this
//  popup, which will contain the string representation of the date selected
var dateField = null;

// To find the dateField, calling page specifies through the URL query string
//  the name of the form the dateField is in, and the name of the field itself
// Should also specify the index if this is a list of dateFields
if ( getReqParam('dateForm') != null )
    dateField = window.opener.document.forms[ getReqParam('dateForm') ].elements[ getReqParam('dateField') ];
else
    dateField = window.opener.document.forms[0].elements[ getReqParam('dateField') ];
if ( dateField.length )
{
    dateField = dateField[ getReqParam('fieldIndex') ];
}

// Initial date from the current value of the dateField.
// Initialize to 1st day of month, otherwise get odd behavior
//  when changing months. Consider if current selected date is
//  March 31 and then user increments month, it will end up
//  with value of May 1, since there's no April 31.
var originalDate = Date.valueOf( dateField.value );
var selectedDate = Date.valueOf( dateField.value );
selectedDate.setDate( 1 );

</SCRIPT>

</HEAD>

<BODY BGCOLOR=#808080 TEXT=#000000 onLoad="resetGrid( selectedDate, document.calendarForm );">

<FORM NAME="calendarForm">

<DIV ALIGN=CENTER>

<TABLE BORDER=0 CELLSPACING=4 CELLPADDING=0>
    <TR>
        <TH><INPUT TYPE=BUTTON CLASS="dateButton" NAME="prevMonth" VALUE="&lt;" onClick="selectedDate.setMonth( selectedDate.getMonth()-1 ); resetGrid( selectedDate, this.form );"></TH>
        <TH COLSPAN=5 CLASS="dateTitle"><INPUT TYPE=TEXT CLASS="label" NAME="monthLabel" readonly VALUE="month" SIZE=10></TH>
        <TH><INPUT TYPE=BUTTON CLASS="dateButton" NAME="nextMonth" VALUE="&gt;" onClick="selectedDate.setMonth( selectedDate.getMonth()+1 ); resetGrid( selectedDate, this.form );"></TH>
    <TR CLASS="caption">
        <TH><INPUT TYPE=BUTTON CLASS="dateButton" NAME="prevYear" VALUE="&lt;&lt;" onClick="selectedDate.setMonth( selectedDate.getMonth()-Date.MONTHS_PER_YEAR ); resetGrid( selectedDate, this.form );"></TH>
        <TH COLSPAN=5 CLASS="dateTitle"><INPUT TYPE=TEXT CLASS="label" NAME="yearLabel" readonly VALUE="year"  SIZE=10></TH>
        <TH><INPUT TYPE=BUTTON CLASS="dateButton" NAME="nextYear" VALUE="&gt;&gt;" onClick="selectedDate.setMonth( selectedDate.getMonth()+Date.MONTHS_PER_YEAR ); resetGrid( selectedDate, this.form );"></TH>
    <TR CLASS="dateHeader">
        <TH>S</TH>
        <TH>M</TH>
        <TH>T</TH>
        <TH>W</TH>
        <TH>R</TH>
        <TH>F</TH>
        <TH>S</TH>

    <SCRIPT>
    for( var i=0; i < Date.WEEKS_PER_MONTH; i++ )
    {
        document.writeln('<TR CLASS="dateCell">');

        for( var j=0; j < Date.DAYS_PER_WEEK; j++ )
        {
            document.writeln('    <TD><INPUT TYPE=BUTTON CLASS="dateButton" NAME="b'+( i*Date.DAYS_PER_WEEK + j )+'" VALUE="" onClick="return selectDate( selectedDate, this, this.form );"></TD>');
        }
    }
    </SCRIPT>
</TABLE>

</DIV>

</FORM>

</BODY></HTML>
